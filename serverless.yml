service: til-rest-bot

frameworkVersion: "4"

provider:
    name: aws
    runtime: nodejs20.x
    region: ap-northeast-2
    environment:
        SUCCESS_RUN_MESSAGE: ${env:SUCCESS_RUN_MESSAGE}
        SLACK_BOT_TOKEN: ${env:SLACK_BOT_TOKEN}
        NOTION_API_KEY: ${env:NOTION_API_KEY}
        TIL_NOTION_DATABASE_ID: ${env:TIL_NOTION_DATABASE_ID}
        TIL_SLACK_WEBHOOK_URL: ${env:TIL_SLACK_WEBHOOK_URL}
        IAM_ACCESS_KEY: ${env:IAM_ACCESS_KEY}
        IAM_SECRET_KEY: ${env:IAM_SECRET_KEY}
        SECURITY_GROUP_ID: ${env:SECURITY_GROUP_ID}
        PRIVATE_SUBNET_ID_1: ${env:PRIVATE_SUBNET_ID_1}
        PRIVATE_SUBNET_ID_2: ${env:PRIVATE_SUBNET_ID_2}
        REDIS_HOST: ${env:REDIS_HOST}
        REDIS_PORT: ${env:REDIS_PORT}
    vpc:
        securityGroupIds:
            - ${env:SECURITY_GROUP_ID}
        subnetIds:
            - ${env:PRIVATE_SUBNET_ID_1}
            - ${env:PRIVATE_SUBNET_ID_2}

functions:
    healthcheck:
        handler: src/handlers/healthcheck.handler
        events:
            - http:
                  path: /healthcheck
                  method: get
    restHandler:
        handler: src/handlers/rest-til.handler
        events:
            - http:
                  path: /slack/events
                  method: post
    tilCheck:
        handler: src/handlers/check-til.handler
        events:
            - schedule: cron(0 15 * * ? 1-5)

resources:
    Resources:
        MyCacheSubnetGroup:
            Type: AWS::ElastiCache::SubnetGroup
            Properties:
                Description: "Subnet group for elasticache"
                SubnetIds:
                    - ${env:PRIVATE_SUBNET_ID_1}
                    - ${env:PRIVATE_SUBNET_ID_2}
        MyElasticacheCluster:
            Type: AWS::ElastiCache::CacheCluster
            Properties:
                CacheNodeType: cache.t3.micro
                Engine: redis
                NumCacheNodes: 1
                VpcSecurityGroupIds:
                    - ${env:SECURITY_GROUP_ID}
                CacheSubnetGroupName: {"Ref": "MyCacheSubnetGroup"}
                ClusterName: tiltily-redis

plugins:
    - serverless-offline

build:
    esbuild:
        bundle: true
        external:
            - "@aws-sdk/client-s3"
        packages: external
        exclude:
            - "@aws-sdk/*"
            - "!@aws-sdk/client-bedrock-runtime"
        buildConcurrency: 3
        minify: false
        sourcemap:
            type: linked
            setNodeOptions: true
